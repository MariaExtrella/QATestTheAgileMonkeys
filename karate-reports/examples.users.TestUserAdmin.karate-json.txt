{"failedCount":9,"prefixedPath":"classpath:examples\/users\/TestUserAdmin.feature","packageQualifiedName":"examples.users.TestUserAdmin","loopIndex":-1,"relativePath":"examples\/users\/TestUserAdmin.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":1196400,"millis":1.1964,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.499 karate.env system property was: prod \n"},{"result":{"nanos":31100,"millis":0.0311,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":6196300,"millis":6.1963,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":971600,"millis":0.9716,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":823000,"millis":0.823,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":837600,"millis":0.8376,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":703800,"millis":0.7038,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":784200,"millis":0.7842,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":678100,"millis":0.6781,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":627700,"millis":0.6277,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":638800,"millis":0.6388,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":27531800,"millis":27.5318,"status":"passed"},"step":{"comments":["# Get a token for the user admin reading a JSON file with the new user's datas"],"line":24,"prefix":"*","index":0,"text":"def NewUser = read('NewUser.json')"}},{"result":{"nanos":3919200,"millis":3.9192,"status":"passed"},"step":{"line":26,"prefix":"Given","index":1,"text":"path 'graphql'"}},{"result":{"nanos":9576300,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:27","millis":9.5763,"status":"failed"},"step":{"line":27,"prefix":"And","index":2,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.576 classpath:examples\/users\/TestUserAdmin.feature:27\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:27\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":28,"prefix":"And","index":3,"text":"request { query: '#(querySaveUser)',  variables: '#(NewUser)'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":29,"prefix":"When","index":4,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":30,"prefix":"Then","index":5,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":33,"prefix":"*","index":6,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":35,"prefix":"*","index":7,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the user can't be created, the response contains a field \"error\""],"line":37,"prefix":"*","index":8,"text":"match response.errors == '#notpresent'"}}],"line":22,"description":"","durationMillis":54.5159,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:27","executorName":"main","name":"The user admin save a new user","startTime":1621379698391,"refId":"[1:22]","endTime":1621379698576,"exampleIndex":-1},{"sectionIndex":1,"stepResults":[{"result":{"nanos":299200,"millis":0.2992,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.590 karate.env system property was: prod \n"},{"result":{"nanos":10100,"millis":0.0101,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":426300,"millis":0.4263,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":329300,"millis":0.3293,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":309500,"millis":0.3095,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":685400,"millis":0.6854,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":321500,"millis":0.3215,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":269400,"millis":0.2694,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":270500,"millis":0.2705,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":237800,"millis":0.2378,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":239000,"millis":0.239,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":413400,"millis":0.4134,"status":"passed"},"step":{"comments":["#### Check the new user created before","# Define the username of the user to list"],"line":43,"prefix":"*","index":0,"text":"def newUser = read('NewUser.json')"}},{"result":{"nanos":1180200,"millis":1.1802,"status":"passed"},"step":{"endLine":49,"line":44,"prefix":"*","docString":"{ \n   \"id\": \"#(newUser.username)\"\n}","index":1,"text":"def id ="}},{"result":{"nanos":4181500,"millis":4.1815,"status":"passed"},"step":{"line":50,"prefix":"*","index":2,"text":"print id"},"stepLog":"01:14:58.600 [print] {\n  \"id\": \"user3@test.com\"\n}\n \n"},{"result":{"nanos":272500,"millis":0.2725,"status":"passed"},"step":{"line":52,"prefix":"Given","index":3,"text":"path 'graphql'"}},{"result":{"nanos":1232900,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:53","millis":1.2329,"status":"failed"},"step":{"line":53,"prefix":"And","index":4,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.602 classpath:examples\/users\/TestUserAdmin.feature:53\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:53\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":54,"prefix":"And","index":5,"text":"header Content-Type = 'application\/json'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":55,"prefix":"And","index":6,"text":"request { query: '#(queryUserReadModel)', variables: '#(id)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":56,"prefix":"When","index":7,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":57,"prefix":"Then","index":8,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":60,"prefix":"*","index":9,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# If the new user was created, the response of the query must contain the datas of the user"],"line":62,"prefix":"*","index":10,"text":"match response.data.UserReadModel == {id: '#(newUser.username)', role: '#(newUser.role)' }"}}],"line":40,"description":"","durationMillis":10.6785,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:53","executorName":"main","name":"List the new user by id","startTime":1621379698589,"refId":"[2:40]","endTime":1621379698602,"exampleIndex":-1},{"sectionIndex":2,"stepResults":[{"result":{"nanos":316900,"millis":0.3169,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.610 karate.env system property was: prod \n"},{"result":{"nanos":15100,"millis":0.0151,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":539900,"millis":0.5399,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":632500,"millis":0.6325,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":534000,"millis":0.534,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":466000,"millis":0.466,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":370800,"millis":0.3708,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":337600,"millis":0.3376,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":352600,"millis":0.3526,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":407100,"millis":0.4071,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":396000,"millis":0.396,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":1404000,"millis":1.404,"status":"passed"},"step":{"comments":["## Try to save a user when the password format isn't allowed"],"line":66,"prefix":"*","index":0,"text":"def newUserBadPassword = read('newUser_BadPassword.json')"}},{"result":{"nanos":333800,"millis":0.3338,"status":"passed"},"step":{"line":68,"prefix":"Given","index":1,"text":"path 'graphql'"}},{"result":{"nanos":1646800,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:69","millis":1.6468,"status":"failed"},"step":{"line":69,"prefix":"And","index":2,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.620 classpath:examples\/users\/TestUserAdmin.feature:69\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:69\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":70,"prefix":"And","index":3,"text":"header Content-Type = 'application\/json'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":71,"prefix":"And","index":4,"text":"request { query: '#(querySaveUser)', variables: '#(newUserBadPassword)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":72,"prefix":"When","index":5,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":73,"prefix":"Then","index":6,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":74,"prefix":"*","index":7,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":77,"prefix":"*","index":8,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# The response return an error"],"line":79,"prefix":"*","index":9,"text":"match response.errors != '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["## Try to save a user when the username format isn't allowed"],"line":82,"prefix":"*","index":10,"text":"def newUserBadUsername = read('newUser_BadUsername.json')"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":84,"prefix":"Given","index":11,"text":"path 'graphql'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":85,"prefix":"And","index":12,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":86,"prefix":"And","index":13,"text":"header Content-Type = 'application\/json'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":87,"prefix":"And","index":14,"text":"request { query: '#(querySaveUser)', variables: '#(newUserBadUsername)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":88,"prefix":"When","index":15,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":89,"prefix":"Then","index":16,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":90,"prefix":"*","index":17,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":93,"prefix":"*","index":18,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# The response return an error"],"line":95,"prefix":"*","index":19,"text":"match response.errors != '#notpresent'"}}],"line":64,"description":"","durationMillis":7.7531,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:69","executorName":"main","name":"Test that datas must be correct to create a new user","startTime":1621379698609,"refId":"[3:64]","endTime":1621379698620,"exampleIndex":-1},{"sectionIndex":3,"stepResults":[{"result":{"nanos":252900,"millis":0.2529,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.628 karate.env system property was: prod \n"},{"result":{"nanos":16400,"millis":0.0164,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":697400,"millis":0.6974,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":553800,"millis":0.5538,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":497200,"millis":0.4972,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":406400,"millis":0.4064,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":366500,"millis":0.3665,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":295600,"millis":0.2956,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":312900,"millis":0.3129,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":276700,"millis":0.2767,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":308900,"millis":0.3089,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":256400,"millis":0.2564,"status":"passed"},"step":{"comments":["# List all users"],"line":100,"prefix":"Given","index":0,"text":"path 'graphql'"}},{"result":{"nanos":1120500,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:101","millis":1.1205,"status":"failed"},"step":{"line":101,"prefix":"And","index":1,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.635 classpath:examples\/users\/TestUserAdmin.feature:101\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:101\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":102,"prefix":"And","index":2,"text":"header Content-Type = 'application\/json'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":103,"prefix":"And","index":3,"text":"request { query: '#(queryUserReadModels)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":104,"prefix":"When","index":4,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":105,"prefix":"Then","index":5,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":108,"prefix":"*","index":6,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that the list is displayed"],"line":110,"prefix":"*","index":7,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":111,"prefix":"*","index":8,"text":"match response.data.UserReadModels contains { id: '#ignore', role: '#ignore' }"}}],"line":97,"description":"","durationMillis":5.3616,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:101","executorName":"main","name":"The user admin can list all the users","startTime":1621379698628,"refId":"[4:97]","endTime":1621379698636,"exampleIndex":-1},{"sectionIndex":4,"stepResults":[{"result":{"nanos":187600,"millis":0.1876,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.642 karate.env system property was: prod \n"},{"result":{"nanos":12500,"millis":0.0125,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":396000,"millis":0.396,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":352900,"millis":0.3529,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":262300,"millis":0.2623,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":236500,"millis":0.2365,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":224700,"millis":0.2247,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":229500,"millis":0.2295,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":207700,"millis":0.2077,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":216700,"millis":0.2167,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":223100,"millis":0.2231,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":766800,"millis":0.7668,"status":"passed"},"step":{"comments":["### Create a customer without photo","# Test shouldn't fail because it isn't a mandatory field"],"line":116,"prefix":"*","index":0,"text":"def new_customerNoPhoto = read('NewCustomerNoPhoto.json')"}},{"result":{"nanos":152700,"millis":0.1527,"status":"passed"},"step":{"line":118,"prefix":"Given","index":1,"text":"path 'graphql'"}},{"result":{"nanos":687800,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:119","millis":0.6878,"status":"failed"},"step":{"line":119,"prefix":"And","index":2,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.648 classpath:examples\/users\/TestUserAdmin.feature:119\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:119\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":120,"prefix":"And","index":3,"text":"request { query: '#(querySaveCustomer)',  variables: '#(new_customerNoPhoto)'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":121,"prefix":"When","index":4,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":122,"prefix":"Then","index":5,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":124,"prefix":"*","index":6,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":127,"prefix":"*","index":7,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# If the customer is saved, the response shouldn't contain a field \"error\""],"line":129,"prefix":"*","index":8,"text":"match response.errors == '#notpresent'"}}],"line":113,"description":"","durationMillis":4.1568,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:119","executorName":"main","name":"The admin user can create customers:","startTime":1621379698641,"refId":"[5:113]","endTime":1621379698648,"exampleIndex":-1},{"sectionIndex":5,"stepResults":[{"result":{"nanos":260800,"millis":0.2608,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.655 karate.env system property was: prod \n"},{"result":{"nanos":15200,"millis":0.0152,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":595400,"millis":0.5954,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":490800,"millis":0.4908,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":321400,"millis":0.3214,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":284800,"millis":0.2848,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":264600,"millis":0.2646,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":281900,"millis":0.2819,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":251900,"millis":0.2519,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":256700,"millis":0.2567,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":257400,"millis":0.2574,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":1005400,"millis":1.0054,"status":"passed"},"step":{"comments":["# Create a new customer when the field photo is filled"],"line":133,"prefix":"*","index":0,"text":"def new_customerPhoto = read('NewCustomerPhoto.json')"}},{"result":{"nanos":169800,"millis":0.1698,"status":"passed"},"step":{"line":135,"prefix":"Given","index":1,"text":"path 'graphql'"}},{"result":{"nanos":6289000,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:136","millis":6.289,"status":"failed"},"step":{"line":136,"prefix":"And","index":2,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.667 classpath:examples\/users\/TestUserAdmin.feature:136\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:136\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":137,"prefix":"And","index":3,"text":"request { query: '#(querySaveCustomer)',  variables: '#(new_customerPhoto)'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":138,"prefix":"When","index":4,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":139,"prefix":"Then","index":5,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":141,"prefix":"*","index":6,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":144,"prefix":"*","index":7,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# If the customer is saved, the response shouldn't contain a field \"error\""],"line":146,"prefix":"*","index":8,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# List all the customers to check that the creation was fine"],"line":150,"prefix":"Given","index":9,"text":"path 'graphql'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":151,"prefix":"And","index":10,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":152,"prefix":"And","index":11,"text":"request { query: '#(queryCustReadModels)'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":153,"prefix":"When","index":12,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":154,"prefix":"Then","index":13,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":157,"prefix":"*","index":14,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that the response doesn't contains a field \"error\""],"line":160,"prefix":"*","index":15,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check the customers created before"],"line":162,"prefix":"*","index":16,"text":"match response.data.CustomerReadModels contains {id: '#(new_customerPhoto.id)', name: '#(new_customerPhoto.name)', surname: '#(new_customerPhoto.surname)', photoUrl: '#(new_customerPhoto.photoUrl)', userId: '#(datas.username)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":163,"prefix":"*","index":17,"text":"match response.data.CustomerReadModels contains {id: '#(new_customerNoPhoto.id)', name: '#(new_customerNoPhoto.name)', surname: '#(new_customerNoPhoto.surname)', photoUrl: '#(new_customerNoPhoto.photoUrl)', userId: '#(datas.username)' }"}}],"line":131,"description":"","durationMillis":10.7451,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:136","executorName":"main","name":"Create a new customer","startTime":1621379698654,"refId":"[6:131]","endTime":1621379698667,"exampleIndex":-1},{"sectionIndex":6,"stepResults":[{"result":{"nanos":167700,"millis":0.1677,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.673 karate.env system property was: prod \n"},{"result":{"nanos":9700,"millis":0.0097,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":373400,"millis":0.3734,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":320900,"millis":0.3209,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":229500,"millis":0.2295,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":197700,"millis":0.1977,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":206000,"millis":0.206,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":459400,"millis":0.4594,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":314600,"millis":0.3146,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":232800,"millis":0.2328,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":219200,"millis":0.2192,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":321900,"millis":0.3219,"status":"passed"},"step":{"comments":["# The admin user can change the role of the user previously created"],"line":168,"prefix":"*","index":0,"text":"def NewUserRole = read('NewUser.json')"}},{"result":{"nanos":382100,"millis":0.3821,"status":"passed"},"step":{"comments":["# Set the role to other value"],"line":171,"prefix":"*","index":1,"text":"def newRole = \"role changed\""}},{"result":{"nanos":804700,"millis":0.8047,"status":"passed"},"step":{"line":172,"prefix":"*","index":2,"text":"set NewUserRole.role = newRole"}},{"result":{"nanos":160500,"millis":0.1605,"status":"passed"},"step":{"line":174,"prefix":"Given","index":3,"text":"path 'graphql'"}},{"result":{"nanos":616000,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:175","millis":0.616,"status":"failed"},"step":{"line":175,"prefix":"And","index":4,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.679 classpath:examples\/users\/TestUserAdmin.feature:175\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:175\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":176,"prefix":"And","index":5,"text":"request { query: '#(queryChangeUserRole)',  variables: '#(NewUserRole)'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":177,"prefix":"When","index":6,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":178,"prefix":"Then","index":7,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":180,"prefix":"*","index":8,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":183,"prefix":"*","index":9,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the change of the role can't be done, the response contains a field \"error\""],"line":185,"prefix":"*","index":10,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["## Check that the role has changed listing the user by id"],"line":189,"prefix":"*","index":11,"text":"def id = \"\"\" { \"id\" : \"#(NewUserRole.username)\" } \"\"\""}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":191,"prefix":"Given","index":12,"text":"path 'graphql'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":192,"prefix":"And","index":13,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":193,"prefix":"And","index":14,"text":"header Content-Type = 'application\/json'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":194,"prefix":"And","index":15,"text":"request { query: '#(queryUserReadModel)', variables: '#(id)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":195,"prefix":"When","index":16,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":196,"prefix":"Then","index":17,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":199,"prefix":"*","index":18,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that the role has changed"],"line":201,"prefix":"*","index":19,"text":"match response.data.UserReadModel == {id: '#(NewUserRole.username)', role: '#(NewUserRole.role)' }"}}],"line":165,"description":"","durationMillis":5.0161,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:175","executorName":"main","name":"Change the role of a given user","startTime":1621379698673,"refId":"[7:165]","endTime":1621379698679,"exampleIndex":-1},{"sectionIndex":7,"stepResults":[{"result":{"nanos":223400,"millis":0.2234,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.686 karate.env system property was: prod \n"},{"result":{"nanos":9600,"millis":0.0096,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":343400,"millis":0.3434,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":270000,"millis":0.27,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":208700,"millis":0.2087,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":190100,"millis":0.1901,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":188800,"millis":0.1888,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":202100,"millis":0.2021,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":246700,"millis":0.2467,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":234600,"millis":0.2346,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":200700,"millis":0.2007,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":346800,"millis":0.3468,"status":"passed"},"step":{"comments":["# Delete the use 'NewUser' created before"],"line":206,"prefix":"*","index":0,"text":"def UserDelete = read('NewUser.json')"}},{"result":{"nanos":634100,"millis":0.6341,"status":"passed"},"step":{"endLine":212,"line":207,"prefix":"*","docString":"{ \n   \"username\": \"#(UserDelete.username)\"\n}","index":1,"text":"def username ="}},{"result":{"nanos":126800,"millis":0.1268,"status":"passed"},"step":{"line":213,"prefix":"Given","index":2,"text":"path 'graphql'"}},{"result":{"nanos":627300,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:214","millis":0.6273,"status":"failed"},"step":{"line":214,"prefix":"And","index":3,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.691 classpath:examples\/users\/TestUserAdmin.feature:214\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:214\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":215,"prefix":"And","index":4,"text":"header Content-Type = 'application\/json'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":216,"prefix":"And","index":5,"text":"request { query: '#(queryDeleteUser)', variables: '#(username)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":217,"prefix":"When","index":6,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":218,"prefix":"Then","index":7,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":220,"prefix":"*","index":8,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that there aren't errors and the user is properly deleted"],"line":223,"prefix":"*","index":9,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["#### List all users to check that the user was deleted"],"line":227,"prefix":"Given","index":10,"text":"path 'graphql'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":228,"prefix":"And","index":11,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":229,"prefix":"And","index":12,"text":"request { query: '#(queryUserReadModels)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":230,"prefix":"When","index":13,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":231,"prefix":"Then","index":14,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":234,"prefix":"*","index":15,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that the response doesn't contains a field \"error\""],"line":236,"prefix":"*","index":16,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":237,"prefix":"*","index":17,"text":"match response.data.UserReadModels != {id: '#(UserDelete.id)', role: '#(UserDelete.role)'}"}}],"line":203,"description":"","durationMillis":4.0531,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:214","executorName":"main","name":"Delete an existing user","startTime":1621379698685,"refId":"[8:203]","endTime":1621379698692,"exampleIndex":-1},{"sectionIndex":8,"stepResults":[{"result":{"nanos":166600,"millis":0.1666,"status":"passed"},"step":{"comments":["# Define a function to introduce a sleep in the test"],"background":true,"line":6,"prefix":"*","index":0,"text":"def wait = function(pause){ java.lang.Thread.sleep(pause) }"},"stepLog":"01:14:58.697 karate.env system property was: prod \n"},{"result":{"nanos":9200,"millis":0.0092,"status":"passed"},"step":{"background":true,"line":8,"prefix":"*","index":1,"text":"url httpUrl"}},{"result":{"nanos":369600,"millis":0.3696,"status":"passed"},"step":{"comments":["# Define the querys so they can be used in all Scenarios"],"background":true,"line":11,"prefix":"*","index":2,"text":"def querySaveUser = read('SaveUser.graphql')"}},{"result":{"nanos":282900,"millis":0.2829,"status":"passed"},"step":{"background":true,"line":12,"prefix":"*","index":3,"text":"def queryUserReadModel = read('UserReadModel.graphql')"}},{"result":{"nanos":212400,"millis":0.2124,"status":"passed"},"step":{"background":true,"line":13,"prefix":"*","index":4,"text":"def queryUserReadModels = read('UserReadModels.graphql')"}},{"result":{"nanos":198100,"millis":0.1981,"status":"passed"},"step":{"background":true,"line":14,"prefix":"*","index":5,"text":"def querySaveCustomer = read('SaveCustomer.graphql')"}},{"result":{"nanos":204000,"millis":0.204,"status":"passed"},"step":{"background":true,"line":15,"prefix":"*","index":6,"text":"def queryCustReadModels = read('CustomerReadModels.graphql')"}},{"result":{"nanos":205900,"millis":0.2059,"status":"passed"},"step":{"background":true,"line":16,"prefix":"*","index":7,"text":"def queryCustReadModel = read('CustomerReadModel.graphql')"}},{"result":{"nanos":199700,"millis":0.1997,"status":"passed"},"step":{"background":true,"line":17,"prefix":"*","index":8,"text":"def queryChangeUserRole = read('ChangeUserRole.graphql')"}},{"result":{"nanos":182100,"millis":0.1821,"status":"passed"},"step":{"background":true,"line":18,"prefix":"*","index":9,"text":"def queryDeleteUser = read('DeleteUser.graphql')"}},{"result":{"nanos":187100,"millis":0.1871,"status":"passed"},"step":{"background":true,"line":19,"prefix":"*","index":10,"text":"def queryDeleteCustomer = read('DeleteCustomer.graphql')"}},{"result":{"nanos":118800,"millis":0.1188,"status":"passed"},"step":{"comments":["#### List the customers to select one to delete"],"line":243,"prefix":"Given","index":0,"text":"path 'graphql'"}},{"result":{"nanos":642500,"errorMessage":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:244","millis":0.6425,"status":"failed"},"step":{"line":244,"prefix":"And","index":1,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"},"stepLog":"01:14:58.701 classpath:examples\/users\/TestUserAdmin.feature:244\nAnd header Authorization = adminToken.tokenType + ' ' + adminToken.idToken\n>>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:244\n"},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":245,"prefix":"And","index":2,"text":"request { query: '#(queryCustReadModels)' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":246,"prefix":"When","index":3,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":247,"prefix":"Then","index":4,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":250,"prefix":"*","index":5,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that the response doesn't contains a field \"error\""],"line":253,"prefix":"*","index":6,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":254,"prefix":"*","index":7,"text":"match response.data.CustomerReadModels contains {id: '#ignore', name: '#ignore', surname: '#ignore', photoUrl: '#ignore', userId: '#ignore' }"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Save the body of the response and get the first to delete"],"line":257,"prefix":"*","index":8,"text":"def list_customers = response.data.CustomerReadModels"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":258,"prefix":"*","index":9,"text":"def customer_toDelete = list_customers[0]"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["#### Delete the customer"],"line":262,"prefix":"Given","index":10,"text":"path 'graphql'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":263,"prefix":"And","index":11,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":264,"prefix":"And","index":12,"text":"request { query: '#(queryDeleteCustomer)', variables: '#(customer_toDelete).id'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":265,"prefix":"When","index":13,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":266,"prefix":"Then","index":14,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":268,"prefix":"*","index":15,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":271,"prefix":"*","index":16,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check if the response contains any error"],"line":274,"prefix":"*","index":17,"text":"match response.errors == '#notpresent'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["### Check that the customer has been deleted searching by id"],"line":278,"prefix":"Given","index":18,"text":"path 'graphql'"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":279,"prefix":"And","index":19,"text":"header Authorization = adminToken.tokenType + ' ' + adminToken.idToken"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":280,"prefix":"And","index":20,"text":"request { query: '#(queryCustReadModel)', variables: '#(customer_toDelete.id)'}"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":281,"prefix":"When","index":21,"text":"method post"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"line":282,"prefix":"Then","index":22,"text":"status 200"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Introduce a pause so the user can be saved before the next test"],"line":284,"prefix":"*","index":23,"text":"wait(4000)"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# if the response status is not 200, the test finish"],"line":287,"prefix":"*","index":24,"text":"if (responseStatus != 200) karate.abort()"}},{"result":{"nanos":0,"millis":0.0,"status":"skipped"},"step":{"comments":["# Check that the customer has been delete"],"line":290,"prefix":"*","index":25,"text":"match response != {id: '#(customer_toDelete.id)', role: '#(customer_toDelete.role)'}"}}],"line":240,"description":"","durationMillis":2.9789,"failed":true,"error":">>>> js failed:\n01: adminToken.tokenType + ' ' + adminToken.idToken\n<<<<\norg.graalvm.polyglot.PolyglotException: ReferenceError: \"adminToken\" is not defined\n- <js>.:program(Unnamed:1)\n\nclasspath:examples\/users\/TestUserAdmin.feature:244","executorName":"main","name":"Delete customers","startTime":1621379698696,"refId":"[9:240]","endTime":1621379698701,"exampleIndex":-1}],"callDepth":0,"name":"Test the API for an admin user in the environment set from the java class","description":"","resultDate":"2021-05-19 01:14:58 a. m.","durationMillis":105.2591,"passedCount":0}